options(stringsAsFactors=FALSE) # for compatibile code between us
library(tidyverse)
liamsWorkingDir <-
"~/Documents/UCSC/Junior/Treehouse/Treehouse_OutlierRNASeq/"
setwd(paste0(liamsWorkingDir, "comp4.3_tert8.ckcc.outlier_results"))
up_outlier_files=list.files(, "outlier_results_")
outlierResults<-lapply(up_outlier_files, function(x) {
read_tsv(x, col_types=cols()) %>%
add_column(sampleID=gsub("outlier_results_", "", x))
}) 	%>%
bind_rows()
dfZerosOrNotZeros <- outlierResults %>%
select(sampleID, sample) %>%
group_by(sampleID) %>%
count(sample == 0)
dfZeros <- dfZerosOrNotZeros %>%
group_by(sampleID) %>%
filter(`sample == 0` == T)
p95df <- outlierResults %>% group_by(sampleID) %>% summarize(p95 = quantile(sample, 0.95))
dfZeros$p95 = p95df$p95
grepl("TH01", outlierResults$sampleID)
grepl("TH01", p95df$sampleID)
dfZeros$color = grepl("TH01", p95df$sampleID)
dfZeros
dfZeros$blue = grepl("TH01", p95df$sampleID)
ggplot(dfScatter, aes(p95,n/1000), color = blue) + geom_point() +
ylab('Unexpressed Genes per Thousand') + xlab('95th Percentile per Sample') +
ggtitle('Each Sample\'s Count of Unexpressed Genes and its 95th Percentile') +
geom_smooth(method = 'lm')
dfScatter <- dfZeros
ggplot(dfScatter, aes(p95,n/1000), color = blue) + geom_point() +
ylab('Unexpressed Genes per Thousand') + xlab('95th Percentile per Sample') +
ggtitle('Each Sample\'s Count of Unexpressed Genes and its 95th Percentile') +
geom_smooth(method = 'lm')
ggplot(dfScatter, aes(p95,n/1000, color = blue)) + geom_point() +
ylab('Unexpressed Genes per Thousand') + xlab('95th Percentile per Sample') +
ggtitle('Each Sample\'s Count of Unexpressed Genes and its 95th Percentile') +
geom_smooth(method = 'lm')
dfZeros$TH01 = grepl("TH01", p95df$sampleID)
dfScatter <- dfZeros
ggplot(dfScatter, aes(p95,n/1000, color = TH01)) + geom_point() +
ylab('Unexpressed Genes per Thousand') + xlab('95th Percentile per Sample') +
ggtitle('Each Sample\'s Count of Unexpressed Genes and its 95th Percentile') +
geom_smooth(method = 'lm')
source('~/Documents/UCSC/Junior/Treehouse/Treehouse_OutlierRNASeq/OrganizedCode/scatter_p95_unexpressed_colored.R')
source('~/Documents/UCSC/Junior/Treehouse/Treehouse_OutlierRNASeq/OrganizedCode/scatter_p95_unexpressed_colored.R')
ggplot(dfScatter, aes(p95,n/1000)) + geom_point() +
ylab('Unexpressed Genes per Thousand') + xlab('95th Percentile per Sample') +
ggtitle('Each Sample\'s Count of Unexpressed Genes and its 95th Percentile') +
geom_smooth(method = 'lm')
df <- outlierResults %>% filter(sampleID == thisSample) %>% filter(sample > 2)
options(stringsAsFactors = FALSE) # for compatibile code between us
library(tidyverse)
library(gridExtra) # easy for putting graphs onto the same page (just use ggarrange(graph1, graph2, ncol = # of display
# columns, nrow = #row))
df <- outlierResults %>% filter(sampleID == thisSample) %>% filter(sample > 2)
for (thisSample in worst15pctSamples$sampleID) {
print(thisSample)
df <- outlierResults %>% filter(sampleID == thisSample) %>% filter(sample > 2)
break
order = order + 1
p <- ggplot(df) +
geom_histogram(aes(sample), binwidth = 0.1) +
ggtitle(thisSample) +
scale_x_continuous(limits = c(0, 20)) +
scale_y_continuous(limits = c(0, 2000))
ggsave(
paste0(
order + 100,
"_",
round(worst15pctSamples[[2]][order], digits = 3),
"_",
thisSample,
".png"
),
plot = p,
"png",
paste0(liamsWorkingDir, "WorstPercentilePlots")
)
}
nfpDF <-
outlierResults %>% group_by(sampleID) %>% summarize(nfp = quantile(sample, 0.95))
fifteenth = quantile(nfpDF$nfp, 0.15)
worst15pctSamples <-
nfpDF %>% filter(nfp < fifteenth) %>% arrange(desc(nfp))
thisSample <- NULL
order <- 0
for (thisSample in worst15pctSamples$sampleID) {
print(thisSample)
df <- outlierResults %>% filter(sampleID == thisSample) %>% filter(sample > 2)
break
order = order + 1
p <- ggplot(df) +
geom_histogram(aes(sample), binwidth = 0.1) +
ggtitle(thisSample) +
scale_x_continuous(limits = c(0, 20)) +
scale_y_continuous(limits = c(0, 2000))
ggsave(
paste0(
order + 100,
"_",
round(worst15pctSamples[[2]][order], digits = 3),
"_",
thisSample,
".png"
),
plot = p,
"png",
paste0(liamsWorkingDir, "WorstPercentilePlots")
)
}
df <- outlierResults %>% filter(sampleID == thisSample) %>% filter(sample > 2)
